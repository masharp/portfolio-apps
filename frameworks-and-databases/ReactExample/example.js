/* React Tutorial Example
    - Completed following the tutorial provided by Facebook and the React.js
    documentation. Includes only the public javascript and not the server or json */

var data = [
  { id: 1, author: "Pete Hunt", text: "This is one comment." },
  { id: 2, author: "Jordan Walke", text: "This is *another* comment."}
];

var CommentBox =  React.createClass({ displayName: "CommentBox",
  loadCommentsFromServer: function loadCommentsFromServer() {
    $.ajax({
      url: this.props.url,
      dataType: "json",
      cache: false,
      success: function getDataSuccess(data) {
        this.setState({ data: data });
      }.bind(this),
      error: function getDataError(xhr, status, error) {
        console.error(this.props.url, status, error.toString());
      }.bind(this)
    });
  },
  //parent function to handle the form's submit event
  handleCommentSubmit: function handleCommentSubmit(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();

    var newComments = comments.concat([comment]);
    this.setState({ data: newComments });

    $.ajax({
      url: this.props.url,
      type: "POST",
      data: comment,
      success: function submitCommentSuccess(data) {
        this.setState({ data: data });
      }.bind(this),
      error: function submitCommentError(xhr, status, error) {
        console.error(this.props.url, status, error.toString());
      }.bind(this)
    });
  },
  getInitialState: function getInitialState() {
    return { data: [] };
  },
  /* called automatically by React after a component is rendered the first time
      polls the server for live updates via the loadCommentsFromServer function at an
      interval specified in the initial render property */
  componentDidMount: function componentDidMount() {
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  },
  render: function render() {
    return (
      React.createElement("div", { className: "commentBox" },
        React.createElement("h1", null, "Comments"),
        React.createElement(CommentList, { data: this.state.data }),
        React.createElement(CommentForm, { onCommentSubmit: this.handleCommentSubmit })
      )
    );
  }
});

var CommentList = React.createClass({ displayName: "CommentList",
  render: function render() {
    var commentNodes = this.props.data.map(function(comment) {
      return (
        React.createElement(Comment, { author: comment.author, key: comment.id }, comment.text)
      );
    });

    return (
      React.createElement("div", { className: "commentList" }, commentNodes)
    );
  }
});

var CommentForm = React.createClass({ displayName: "CommentForm",
  getInitialState: function getInitialState() {
    return { author: "", text: "" };
  },
  handleAuthorChange: function handleAuthorChange(event) {
    this.setState({ author: event.target.value });
  },
  handleTextChange: function handleAuthorChange(event) {
    this.setState({ text: event.target.value });
  },
  handleSubmit: function handleSubmit(event) {
    event.preventDefault();
    var author = this.state.author.trim();
    var text = this.state.text.trim();

    if(!text || !author) {
      return;
    }
    this.props.onCommentSubmit({ author: author, text: text });
    this.setState({ author: "", text: "" });
  },
  render: function render() {
    return (
      React.createElement("form", { className: "commentForm", onSubmit: this.handleSubmit },
        React.createElement("input", { type: "text", placeholder: "Your name", value: this.state.author, onChange: this.handleAuthorChange }),
        React.createElement("input", { type: "text", placeholder: "Say something...", value: this.state.text, onChange: this.handleTextChange }),
        React.createElement("input", { type: "submit", value: "Post". onCh })
      )
    );
  }
});

var Comment = React.createClass({
  rawMarkup: function rawMarkup() {
    var rawMarkup = marked(this.props.children.toString(), { sanitize: true });
    return { __html: rawMarkup };
  },

  render: function render() {
    return (
      React.createElement("div", { className: "comment" },
        React.createElement("h2", { className: "commentAuthor" }, this.props.author),
        React.createElement("span", { dangerouslySetInnerHTML: this.rawMarkup() })
      )
    );
  }
});

ReactDOM.render(React.createElement(CommentBox, { url: "/api/comments", pollInterval: 2000 }), document.getElementById("content"));
